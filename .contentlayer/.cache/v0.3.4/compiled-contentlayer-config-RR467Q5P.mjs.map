{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { makeSource, defineDatabase } from 'contentlayer-source-notion'\nimport * as notion from '@notionhq/client'\nimport { defineDocumentType } from \"contentlayer/source-files\"\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\"\nimport rehypePrettyCode from \"rehype-pretty-code\"\nimport rehypeSlug from \"rehype-slug\"\nimport remarkGfm from \"remark-gfm\"\n\n/** @type {import('contentlayer/source-files').ComputedFields} */\nconst computedFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\n  },\n  slugAsParams: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n  },\n}\n\n/* MDX File Blog Posts configuration */\n// export const Post = defineDocumentType(() => ({\n//   name: \"Post\",\n//   filePathPattern: `blog/**/*.mdx`,\n//   contentType: \"mdx\",\n//   fields: {\n//     title: {\n//       type: \"string\",\n//       required: true,\n//     },\n//     description: {\n//       type: \"string\",\n//     },\n//     date: {\n//       type: \"date\",\n//       required: true,\n//     },\n//     published: {\n//       type: \"boolean\",\n//       default: true,\n//     },\n//     image: {\n//       type: \"string\",\n//       required: true,\n//     },\n//     authors: {\n//       // Reference types are not embedded.\n//       // Until this is fixed, we can use a simple list.\n//       // type: \"reference\",\n//       // of: Author,\n//       type: \"list\",\n//       of: { type: \"string\" },\n//       required: true,\n//     },\n//   },\n//   computedFields,\n// }))\n\nconst client = new notion.Client({ auth: process.env.NEXT_NOTION_SECRET })\n\n/* Notion Integration */\nexport const Post = defineDatabase(() => ({\n  name: 'Post',\n  databaseId: process.env.NEXT_NOTION_DATABASE_ID,\n  query: {\n    filter: {\n      property: 'Status',\n      status: { equals: 'Published' },\n    },\n  },\n  properties: {\n    date: { name: 'Created time' },\n  },\n  computedFields: {\n    url: { type: 'string', resolve: (post) => `/posts/${post._id}` },\n  },\n}))\n\n\nexport const Author = defineDocumentType(() => ({\n  name: \"Author\",\n  filePathPattern: `authors/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n    },\n    avatar: {\n      type: \"string\",\n      required: true,\n    },\n    twitter: {\n      type: \"string\",\n      required: true,\n    },\n  },\n  computedFields,\n}))\n\n// export default makeSource({\n//   contentDirPath: \"./content\",\n//   documentTypes: [Author],\n//   client,\n//   databaseTypes: [Post],\n//   mdx: {\n//     remarkPlugins: [remarkGfm],\n//     rehypePlugins: [\n//       rehypeSlug,\n//       [\n//         rehypePrettyCode,\n//         {\n//           theme: \"github-dark\",\n//           onVisitLine(node) {\n//             // Prevent lines from collapsing in `display: grid` mode, and allow empty\n//             // lines to be copy/pasted\n//             if (node.children.length === 0) {\n//               node.children = [{ type: \"text\", value: \" \" }]\n//             }\n//           },\n//           onVisitHighlightedLine(node) {\n//             node.properties.className.push(\"line--highlighted\")\n//           },\n//           onVisitHighlightedWord(node) {\n//             node.properties.className = [\"word--highlighted\"]\n//           },\n//         },\n//       ],\n//       [\n//         rehypeAutolinkHeadings,\n//         {\n//           properties: {\n//             className: [\"subheading-anchor\"],\n//             ariaLabel: \"Link to section\",\n//           },\n//         },\n//       ],\n//     ],\n//   },\n// })\n\nexport default makeSource({ client, databaseTypes: [Post] })"],
  "mappings": ";AAAA,SAAS,YAAY,sBAAsB;AAC3C,YAAY,YAAY;AACxB,SAAS,0BAA0B;AACnC,OAAO,4BAA4B;AACnC,OAAO,sBAAsB;AAC7B,OAAO,gBAAgB;AACvB,OAAO,eAAe;AAGtB,IAAM,iBAAiB;AAAA,EACrB,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,IAAI,KAAK,aAAa;AAAA,EAC9C;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,EACvE;AACF;AAwCA,IAAM,SAAS,IAAW,cAAO,EAAE,MAAM,QAAQ,IAAI,mBAAmB,CAAC;AAGlE,IAAM,OAAO,eAAe,OAAO;AAAA,EACxC,MAAM;AAAA,EACN,YAAY,QAAQ,IAAI;AAAA,EACxB,OAAO;AAAA,IACL,QAAQ;AAAA,MACN,UAAU;AAAA,MACV,QAAQ,EAAE,QAAQ,YAAY;AAAA,IAChC;AAAA,EACF;AAAA,EACA,YAAY;AAAA,IACV,MAAM,EAAE,MAAM,eAAe;AAAA,EAC/B;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK,EAAE,MAAM,UAAU,SAAS,CAAC,SAAS,UAAU,KAAK,GAAG,GAAG;AAAA,EACjE;AACF,EAAE;AAGK,IAAM,SAAS,mBAAmB,OAAO;AAAA,EAC9C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,IACR;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,SAAS;AAAA,MACP,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA;AACF,EAAE;AA2CF,IAAO,8BAAQ,WAAW,EAAE,QAAQ,eAAe,CAAC,IAAI,EAAE,CAAC;",
  "names": []
}
